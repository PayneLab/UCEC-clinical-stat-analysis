# -*- coding: utf-8 -*-
"""UnderstandData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JTl4qadfQEuHDUN4EeZRXpLdegmY-dqa
"""

#!pip install PyQt5

import requests, sys, json
import xml.etree.ElementTree as ET
from xml.etree.ElementTree import Element, SubElement, Comment 
#from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QAction, QTableWidget,QTableWidgetItem,QVBoxLayout
#from PyQt5.QtGui import QIcon
#from PyQt5.QtCore import pyqtSlot

#This will be replaced with Ben's code to find the good sites
listOfProteins = ['ACIN1-K359', 'ADIRF-K70', 'AHCYL1-K246', 'AK2-K181', 'AFAM-K117', 'AFAM-K130', 'AFAM-K160', 'AFAM-K161',
                  'AFAM-K183', 'AFAM-K186', 'AFAM-K198', 'AFAM-K236', 'AFAM-K264', 'AFAM-K298', 'AFAM-K305', 'AFAM-K310', 'AFAM-K341',
                  'AFAM-K36', 'AFAM-K383', 'AFAM-K396', 'AFAM-K402', 'AFAM-K413', 'AFAM-K426', 'AFAM-K44', 'AFAM-K463', 'AFAM-K549',
                  'AFAM-K558', 'AFAM-K581', 'AFAM-K584', 'AFAM-K588', 'AFAM-K597', 'AFAM-K88', 'AFAM-K97', 'ALDOA-K384', 'ALDOA-K96',
                  'ANXA5-K309', 'ANXA5-K70', 'ANXA5-K76', 'ANXA5-K79', 'ANXA5-K97', 'ANXA6-K314', 'APCS-K162', 'APOA1-K131',
                  'APOA2-K77', 'ASH2L-K312', 'ASPN-K230', 'ATP5PF-K113', 'BGN-K219', 'BGN-K82', 'BRPF1-K902', 'CCAR2-K215',
                  'CCDC86-K225', 'CDK1-K33', 'COX17-K30', 'CREBBP-K1216', 'CREBBP-K1837', 'CSRP1-K112', 'CSRP1-K131', 'CSRP1-K161',
                  'CSRP1-K168', 'CSRP1-K84', 'CSTB-K30', 'CTTN-K87', 'CYB5R1-K167', 'DBI-K114', 'DBI-K116', 'DCN-K200', 'DCN-K280',
                  'DCN-K74', 'DDAH2-K51', 'DDX5-K40', 'DES-K193', 'DES-K240', 'DES-K339', 'DHX15-K17', 'DSP-K1593', 'EEF1A1-K179',
                  'EEF1A1-K392', 'EEF1A1-K439', 'EEF1G-K434', 'ENO1-K81', 'EP300-K1542', 'EP300-K1546', 'EP300-K1549', 'EP300-K1550',
                  'EP300-K1551', 'EP300-K1554', 'EP300-K1555', 'EP300-K1558', 'EP300-K1560', 'EP400-K345', 'EPRS-K300', 'EPRS-K497',
                  'FASN-K673', 'FEN1-K375', 'FHL1-K86', 'FLNA-K2513', 'FLNA-K2569', 'FLNA-K2607', 'FLNA-K299', 'FLNA-K578', 'FLNA-K700',
                  'FLNA-K874', 'FTSJ3-K233', 'FUS-K332', 'GAPDH-K219', 'GAPDH-K66', 'GRHL2-K453', 'GSN-K548', 'GSN-K728', 'GSTK1-K225',
                  'GTF2E1-K67', 'GTF2F2-K137', 'H2AFJ-K10', 'H2AFJ-K6', 'H2AFV-K12', 'H2AFV-K14', 'H2AFY-K123', 'HADHA-K350',
                  'HIST1H2AB-K96', 'HIST1H2BD-K12', 'HIST1H2BD-K13', 'HIST1H2BD-K6', 'HIST1H2BL-K6', 'HIST2H2BF-K12', 'HIST2H2BF-K6',
                  'HIST3H2BB-K6', 'HMGA1-K15', 'HMGCL-K48', 'HMGCL-K93', 'HMGN1-K27', 'HMGN2-K11', 'HMGN2-K64', 'HMGN2-K82', 'HMGN2-K90',
                  'HMGN4-K31', 'HMGN4-K64', 'HNRNPA1-K350', 'HNRNPA2B1-K112', 'HNRNPA2B1-K59', 'HNRNPC-K243', 'HNRNPK-K60', 'HNRNPM-K698',
                  'HSPA1A-K246', 'HSPA4-K477', 'HSPA8-K601', 'HSPD1-K202', 'HSPD1-K364', 'IDH1-K224', 'IDH1-K236', 'IDH1-K81', 'IL33-K23',
                  'ILK-K426', 'INTS4-K26', 'JADE2-K48', 'JADE2-K54', 'KMT2C-K1766', 'KMT2C-K1772', 'KMT2C-K2809', 'KMT2C-K2814',
                  'KMT2C-K2832', 'KMT2C-K2836', 'KMT2C-K3860', 'KMT2C-K758', 'KMT2D-K2468', 'LDHA-K251', 'LGALS1-K128', 'LMNA-K108',
                  'LMNA-K114', 'LMNA-K155', 'LMNA-K171', 'LMNA-K180', 'LMNA-K233', 'LMNA-K265', 'LMNA-K270', 'LMNA-K316', 'LMNA-K470',
                  'LMNA-K78', 'LMNB2-K195', 'LMNB2-K200', 'LMNB2-K285', 'LMNB2-K290', 'LMNB2-K298', 'LUM-K181', 'MATR3-K711', 'ME2-K156',
                  'MEAF6-K74', 'MEF2A-K247', 'MLLT6-K1084', 'MTREX-K51', 'MTREX-K78', 'MYBBP1A-K158', 'MYH10-K1483', 'MYH11-K1028',
                  'MYH11-K1263', 'MYH11-K1338', 'MYH11-K1662', 'MYH11-K554', 'MYH11-K579', 'NADK2-K397', 'NANS-K290', 'NASP-K417',
                  'NBN-K544', 'NCL-K109', 'NCL-K138', 'NCL-K646', 'NCL-K87', 'NCL-K95', 'NOLC1-K406', 'NOLC1-K76', 'NPM1-K150',
                  'NPM1-K154', 'NPM1-K250', 'NPM1-K27', 'NSUN2-K586', 'NT5DC1-K171', 'NUCKS1-K35', 'NUDT21-K23', 'NUP88-K608',
                  'PABPC3-K108', 'PARP1-K105', 'PBRM1-K414', 'PFKM-K781', 'PGK1-K139', 'PGP-K300', 'PKM-K280', 'PPP4R3A-K642',
                  'PRDX1-K168', 'PRKDC-K3241', 'PSMA6-K104', 'PSMA6-K181', 'PSMB3-K77', 'PSMC4-K418', 'PSMD1-K720', 'PTGES3-K37',
                  'PTMS-K15', 'PURA-K273', 'RBBP7-K163', 'RBM14-K149', 'REPIN1-K90', 'RNF40-K20', 'RPN1-K538', 'RPS11-K45', 'RPS18-K94',
                  'RPS27A-K152', 'RPS3-K62', 'RPS3A-K109', 'RSF1-K1386', 'SAMHD1-K11', 'SELENOH-K20', 'SERF2-K23', 'SF3A1-K486',
                  'SFPQ-K208', 'SFPQ-K703', 'SMARCC1-K354', 'SNX1-K237', 'SOD1-K123', 'SON-K2055', 'SP3-K6', 'SSB-K354', 'SSB-K360',
                  'STIP1-K442', 'SUB1-K53', 'TAGLN-K17', 'TAGLN2-K38', 'TALDO1-K286', 'TALDO1-K314', 'TALDO1-K337', 'TCOF1-K393',
                  'TF-K659', 'TMSB10-K15', 'TMSB10-K4', 'TOP2B-K1427', 'TOX4-K207', 'TRIM33-K953', 'TRIR-K146', 'UBA6-K544', 'UBN2-K1148',
                  'VCL-K387', 'VCL-K699', 'VCL-K992', 'VDAC2-K89', 'VDAC3-K64', 'VIM-K120', 'VIM-K235', 'WDR75-K466', 'XPNPEP1-K330',
                  'YLPM1-K317', 'ZFR-K509', 'ZNF638-K1477']

#This array is for just the 'head'
newListProteins = []

#Hold all accession IDs 
namesToAccession = {}

#A 'head' mapped to an array of numbers
headToTail = {}

#Temp array
listOfSites = []

#Removed dashes from proteins (head) and K from numbers (tail)
for dashedProtein in listOfProteins:
    head, sep, tail = dashedProtein.partition('-K')
    
    newListProteins.append(head)
    if head in headToTail:
        listOfSites.append(tail)
        headToTail[head] = listOfSites
    else:
        listOfSites = []
        listOfSites.append(tail)
        headToTail[head] = listOfSites

for name in newListProteins:

    #Need to find a way not to pass in bad names to this API
    try:

        #Call Uniprot API to get the XML response body
        requestURL = "https://www.uniprot.org/uniprot/?query=mnemonic:"+name+"_HUMAN&format=xml"
        responseBody = requests.get(requestURL)

        #Bad request
        if not responseBody.ok:
          responseBody.raise_for_status()
          sys.exit()

        #The root contains all the elements inside the XML
        root = ET.fromstring(responseBody.content)

        accessionID = ""

        #Parse through XML to gather the Accession ID
        for element1 in Element.iter(root):
            if 'entry' in element1.tag:
                for element2 in Element.iter(element1):
                    if 'dbReference' in element2.tag:
                        for element3 in Element.iter(element2):
                            if 'Genevisible' == element3.get('type'):
                                accessionID = element3.get('id')
                                namesToAccession[name] = accessionID
                                #print(accessionID)

        
        #Now we have the accessionID, call an API to gather its information
        requestURL = "https://www.ebi.ac.uk/proteins/api/proteins/" + accessionID
        responseBody = requests.get(requestURL, headers={ "Accept" : "application/json"})

        #Bad request
        if not responseBody.ok:
          responseBody.raise_for_status()
          sys.exit()

        data = responseBody.json()

        #This is where I will store the data and load it into a table
        #print(data['comments'][0]['text'][0]['value'])
        #print(data['protein']['recommendedName']['fullName']['value'])

        #Here I check the JSON response body for sites
        for i in data['features']:
            if i['type'] == 'MOD_RES':
                if i['begin'] in headToTail[name]:
                    print(name, i['begin'])
                    headToTail[name].remove(i['begin'])

    except:
        print("Error:", name)

#Figure this out soon...
#Display the data
'''class App(QWidget):
 
    def __init__(self):
        super().__init__()
        self.title = 'Proteins and their functions'
        self.left = 0
        self.top = 0
        self.width = 1200
        self.height = 800
        self.initUI()
 
    def initUI(self):
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)
 
        self.createTable()
 
        # Add box layout, add table to box layout and add box layout to widget
        self.layout = QVBoxLayout()
        self.layout.addWidget(self.tableWidget) 
        self.setLayout(self.layout) 
 
        # Show widget
        self.show()
 
    def createTable(self):
        w, h = 8, 5;
        Matrix = [[0 for x in range(w)] for y in range(h)]

        #Create table
        self.tableWidget = QTableWidget()
        self.tableWidget.setRowCount(len(Matrix))
        self.tableWidget.setColumnCount(len(Matrix[0]))

        self.tableWidget.setItem(0,0, QTableWidgetItem("Name"))
        self.tableWidget.setItem(0,1, QTableWidgetItem("Full Name"))
        self.tableWidget.setItem(0,2, QTableWidgetItem("Alternate Name"))
        self.tableWidget.setItem(0,3, QTableWidgetItem("Binds"))
        self.tableWidget.setItem(0,4, QTableWidgetItem("Key Words"))
        self.tableWidget.setItem(0,5, QTableWidgetItem("Linked to..."))
        self.tableWidget.setItem(0,6, QTableWidgetItem("Function"))
        self.tableWidget.setItem(0,7, QTableWidgetItem("Pathway"))

        #Have a dictionary with an ID mapping to an array

        self.tableWidget.move(0,0)
 
        # table selection change
        self.tableWidget.doubleClicked.connect(self.on_click)
 
    @pyqtSlot()
    def on_click(self):
        print("\n")
        for currentQTableWidgetItem in self.tableWidget.selectedItems():
            print(currentQTableWidgetItem.row(), currentQTableWidgetItem.column(), currentQTableWidgetItem.text())

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    sys.exit(app.exec_())'''

#print(namesToAccession)